name: CICD

on:
  push:
    branches:
      - main
env:
  MY_SECRET: ${{secrets.SA_KEY}}
  APP_DOCKER_IMAGE: aambekar234/apps:ml-income-predict-app
  RENDER_HOOK: ${{secrets.RENDER_HOOK}}

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    container:
        image: aambekar234/base-ml-py3.8:v1.1
        options: --user root
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Store google key file for dvc
      shell: bash
      run: |
        mkdir keys
        echo -n "$MY_SECRET" > keys/sa-key.json

    - name: Run flake8 test
      run: |
        conda init bash
        . /github/home/.bashrc
        conda activate base-ml-py3.8
        chown root /__w/ml-income-predict-app/ml-income-predict-app/
        dvc pull
        pip install flake8
        flake8 --exclude=./sanitycheck.py

    - name: Run pytest
      run: |
        conda activate base-ml-py3.8
        conda env list
        pwd
        pytest -v

    - name: Package the app in tar file
      run: tar -cvf app.tar ./

    - name: Upload App directory
      uses: actions/upload-artifact@v3
      with:
        name: app.tar
        path: ./app.tar
        retention-days: 0

  dockerize-app:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:

    - name: Download Packaged App
      uses: actions/download-artifact@v3
      with:
        name: app.tar
        path: ./

    - name: Extract the package
      shell: bash
      run: |
        mkdir app
        tar -xf app.tar -C ./app/
        cd app
        pwd
        ls -la
        
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build App image and push
      run: |
        cd app
        docker build -t "$APP_DOCKER_IMAGE" .
        docker push "$APP_DOCKER_IMAGE"


  deploy:
    needs: [dockerize-app]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy with render hook url 
        shell: bash
        run: |
          curl -s -X GET "$RENDER_HOOK" 
       





